@use "./var.scss" as var;
@use "./rules.scss" as rules;
@use "./languages.scss" as languages;
@import url("https://s1.hdslb.com/bfs/static/jinkela/long/font/regular.css");
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono&family=Noto+Naskh+Arabic:wght@500&family=Noto+Sans+KR&family=Noto+Sans+SC&display=swap');

@font-face {
  font-family: Cus_Emoji;
  src: local(var.$emoji), local("Segoe UI Emoji"), local("Segoe UI Symbol"), local("Apple Color Emoji"), local("Noto Color Emoji");
  unicode-range: U+1F000-1F644, U+203C-3299;
}

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

body,
html,
#{languages.$chinese-indo-european-selector} {
  font-family: rules.$chinese_rules;
}

pre,
code,
kbd,
samp {
  font-family: rules.$code_rules !important;
}

button,
input,
keygen,
optgroup,
select,
textarea {
  font-family: inherit;
}

// 当声明了下方字体时，按照我的规则进行字体文件读取
$replace-chinese-font-list: 'Microsoft YaHei', '微软雅黑', '-apple-system', 'TwitterChirp', 'PingFang SC', 'Helvetica';

// 生成font-face的mixin
@mixin generate-font-faces($font-list, $rules) {
  @each $font-family in $font-list {
    $src-list: ();

    @each $rule in $rules {
      @if type-of($rule)=='list' {
        @each $inner-rule in $rule {
          $src-list: append($src-list, unquote('local("#{$inner-rule}")'), comma);
        }
      }

      @else {
        $src-list: append($src-list, unquote('local("#{$rule}")'), comma);
      }
    }

    @font-face {
      font-family: '#{$font-family}';
      src: $src-list;
    }
  }
}

// 生成中文字体的替换规则
@include generate-font-faces($replace-chinese-font-list, rules.$chinese_rules);
